"""
Script de d√©marrage unifi√© pour le Hackathon
RansomGuard AI - Togo IT Days 2025
"""

import os
import sys
import subprocess
import time
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class HackathonStarter:
    """D√©marreur optimis√© pour le hackathon"""
    
    def __init__(self):
        self.backend_dir = Path(__file__).parent
        self.frontend_dir = self.backend_dir.parent / "frontend"
        self.models_dir = self.backend_dir / "models"
        self.backend_port = 8000
        self.frontend_port = 3000
        
    def check_prerequisites(self) -> bool:
        """V√©rifier les pr√©requis"""
        logger.info("üîç V√©rification des pr√©requis...")
        
        # V√©rifier Python
        try:
            python_version = sys.version_info
            if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
                logger.error("‚ùå Python 3.8+ requis")
                return False
            logger.info(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification Python: {e}")
            return False
        
        # V√©rifier Node.js
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error("‚ùå Node.js requis")
                return False
            logger.info(f"‚úÖ Node.js {result.stdout.strip()}")
        except FileNotFoundError:
            logger.error("‚ùå Node.js non trouv√©")
            return False
        
        # V√©rifier npm
        try:
            result = subprocess.run(['npm', '--version'], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error("‚ùå npm requis")
                return False
            logger.info(f"‚úÖ npm {result.stdout.strip()}")
        except FileNotFoundError:
            logger.error("‚ùå npm non trouv√©")
            return False
        
        return True
    
    def install_dependencies(self) -> bool:
        """Installer les d√©pendances"""
        logger.info("üì¶ Installation des d√©pendances...")
        
        try:
            # Installer les d√©pendances Python
            logger.info("üîÑ Installation des d√©pendances Python...")
            result = subprocess.run([
                sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
            ], cwd=self.backend_dir, capture_output=True, text=True)
            
            if result.returncode != 0:
                logger.error(f"‚ùå Erreur installation Python: {result.stderr}")
                return False
            logger.info("‚úÖ D√©pendances Python install√©es")
            
            # Installer les d√©pendances Node.js
            if self.frontend_dir.exists():
                logger.info("üîÑ Installation des d√©pendances Node.js...")
                result = subprocess.run(['npm', 'install'], cwd=self.frontend_dir, capture_output=True, text=True)
                
                if result.returncode != 0:
                    logger.error(f"‚ùå Erreur installation Node.js: {result.stderr}")
                    return False
                logger.info("‚úÖ D√©pendances Node.js install√©es")
            else:
                logger.warning("‚ö†Ô∏è Dossier frontend non trouv√©, cr√©ation d'un frontend minimal...")
                self.create_minimal_frontend()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'installation: {e}")
            return False
    
    def create_minimal_frontend(self):
        """Cr√©er un frontend minimal si n√©cessaire"""
        try:
            self.frontend_dir.mkdir(exist_ok=True)
            
            # package.json minimal
            package_json = {
                "name": "ransomguard-frontend",
                "version": "1.0.0",
                "private": True,
                "dependencies": {
                    "react": "^18.2.0",
                    "react-dom": "^18.2.0",
                    "react-scripts": "5.0.1",
                    "axios": "^1.6.0",
                    "lucide-react": "^0.294.0",
                    "recharts": "^2.8.0"
                },
                "scripts": {
                    "start": "react-scripts start",
                    "build": "react-scripts build",
                    "test": "react-scripts test",
                    "eject": "react-scripts eject"
                },
                "browserslist": {
                    "production": [">0.2%", "not dead", "not op_mini all"],
                    "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
                }
            }
            
            import json
            with open(self.frontend_dir / "package.json", 'w') as f:
                json.dump(package_json, f, indent=2)
            
            # Cr√©er un App.tsx minimal
            app_tsx = '''import React from 'react';
import { Shield, Activity, AlertTriangle } from 'lucide-react';

function App() {
  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <Shield className="w-12 h-12 text-blue-600" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">RansomGuard AI</h1>
          <p className="text-gray-600">Syst√®me de protection contre les ransomware</p>
          <p className="text-sm text-gray-500 mt-2">Hackathon Togo IT Days 2025</p>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">Statut du Syst√®me</h2>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              <span className="text-sm text-gray-600">Actif</span>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Activity className="w-5 h-5 text-blue-600" />
                <span className="font-medium">Menaces D√©tect√©es</span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">0</p>
            </div>
            
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Shield className="w-5 h-5 text-green-600" />
                <span className="font-medium">Fichiers Prot√©g√©s</span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">15,420</p>
            </div>
            
            <div className="bg-yellow-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="w-5 h-5 text-yellow-600" />
                <span className="font-medium">Dernier Scan</span>
              </div>
              <p className="text-sm text-gray-600 mt-2">Il y a 5 min</p>
            </div>
          </div>
          
          <div className="mt-6 text-center">
            <p className="text-gray-600 mb-4">
              Le syst√®me de d√©tection est op√©rationnel et prot√®ge votre ordinateur.
            </p>
            <div className="text-sm text-gray-500">
              Backend API: http://localhost:8000<br/>
              Documentation: http://localhost:8000/docs
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
'''
            
            # Cr√©er la structure minimale
            src_dir = self.frontend_dir / "src"
            src_dir.mkdir(exist_ok=True)
            
            with open(src_dir / "App.tsx", 'w') as f:
                f.write(app_tsx)
            
            # Cr√©er index.js
            index_js = '''import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
'''
            
            with open(src_dir / "index.js", 'w') as f:
                f.write(index_js)
            
            # Cr√©er public/index.html
            public_dir = self.frontend_dir / "public"
            public_dir.mkdir(exist_ok=True)
            
            index_html = '''<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="RansomGuard AI - Protection contre les ransomware" />
    <title>RansomGuard AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
'''
            
            with open(public_dir / "index.html", 'w') as f:
                f.write(index_html)
            
            logger.info("‚úÖ Frontend minimal cr√©√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation du frontend minimal: {e}")
    
    def train_models(self) -> bool:
        """Entra√Æner les mod√®les IA"""
        logger.info("üß† Entra√Ænement des mod√®les IA...")
        
        try:
            # V√©rifier si les mod√®les existent d√©j√†
            if self.models_dir.exists() and any(self.models_dir.glob("*.pkl")):
                logger.info("‚úÖ Mod√®les d√©j√† entra√Æn√©s d√©tect√©s")
                return True
            
            # Lancer l'entra√Ænement
            result = subprocess.run([
                sys.executable, 'train_models_for_hackathon.py'
            ], cwd=self.backend_dir, capture_output=True, text=True)
            
            if result.returncode != 0:
                logger.error(f"‚ùå Erreur lors de l'entra√Ænement: {result.stderr}")
                return False
            
            logger.info("‚úÖ Mod√®les entra√Æn√©s avec succ√®s")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
            return False
    
    def start_backend(self):
        """D√©marrer le backend"""
        logger.info("üöÄ D√©marrage du backend...")
        
        try:
            # D√©marrer le backend en arri√®re-plan
            backend_process = subprocess.Popen([
                sys.executable, 'main.py'
            ], cwd=self.backend_dir)
            
            # Attendre que le backend d√©marre
            time.sleep(3)
            
            # V√©rifier que le backend fonctionne
            import requests
            try:
                response = requests.get(f'http://localhost:{self.backend_port}/api/status', timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ Backend d√©marr√© avec succ√®s")
                    return backend_process
                else:
                    logger.error("‚ùå Backend ne r√©pond pas correctement")
                    return None
            except requests.exceptions.RequestException:
                logger.error("‚ùå Impossible de se connecter au backend")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage du backend: {e}")
            return None
    
    def start_frontend(self):
        """D√©marrer le frontend"""
        logger.info("üé® D√©marrage du frontend...")
        
        try:
            # D√©marrer le frontend en arri√®re-plan
            frontend_process = subprocess.Popen([
                'npm', 'start'
            ], cwd=self.frontend_dir)
            
            # Attendre que le frontend d√©marre
            time.sleep(5)
            
            logger.info("‚úÖ Frontend d√©marr√© avec succ√®s")
            return frontend_process
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage du frontend: {e}")
            return None
    
    def print_startup_info(self):
        """Afficher les informations de d√©marrage"""
        print("\n" + "="*60)
        print("üéâ RANSOMGUARD AI - SYST√àME D√âMARR√â AVEC SUCC√àS!")
        print("="*60)
        print()
        print("üåê Acc√®s au syst√®me:")
        print(f"   ‚Ä¢ Frontend: http://localhost:{self.frontend_port}")
        print(f"   ‚Ä¢ Backend API: http://localhost:{self.backend_port}")
        print(f"   ‚Ä¢ Documentation API: http://localhost:{self.backend_port}/docs")
        print(f"   ‚Ä¢ Statut API: http://localhost:{self.backend_port}/api/status")
        print()
        print("üß™ Tests disponibles:")
        print("   ‚Ä¢ Test d'un fichier: python test_suite/test_single_executable.py")
        print("   ‚Ä¢ Test complet: python test_suite/test_advanced_detection.py")
        print("   ‚Ä¢ Test d'√©vasion: python test_suite/test_naming_evasion.py")
        print()
        print("üìö Documentation:")
        print("   ‚Ä¢ README.md - Guide complet")
        print("   ‚Ä¢ docs/GUIDE_DEMARRAGE_RAPIDE.md - D√©marrage rapide")
        print("   ‚Ä¢ docs/SYSTEME_AVANCE.md - Architecture avanc√©e")
        print()
        print("üõ°Ô∏è Le syst√®me prot√®ge maintenant votre ordinateur!")
        print("="*60)
    
    def run(self):
        """Ex√©cuter le d√©marrage complet"""
        logger.info("üöÄ D√©marrage du syst√®me RansomGuard AI pour le hackathon...")
        
        # √âtape 1: V√©rifier les pr√©requis
        if not self.check_prerequisites():
            logger.error("‚ùå Pr√©requis non satisfaits")
            return False
        
        # √âtape 2: Installer les d√©pendances
        if not self.install_dependencies():
            logger.error("‚ùå √âchec de l'installation des d√©pendances")
            return False
        
        # √âtape 3: Entra√Æner les mod√®les
        if not self.train_models():
            logger.error("‚ùå √âchec de l'entra√Ænement des mod√®les")
            return False
        
        # √âtape 4: D√©marrer le backend
        backend_process = self.start_backend()
        if not backend_process:
            logger.error("‚ùå √âchec du d√©marrage du backend")
            return False
        
        # √âtape 5: D√©marrer le frontend
        frontend_process = self.start_frontend()
        if not frontend_process:
            logger.error("‚ùå √âchec du d√©marrage du frontend")
            backend_process.terminate()
            return False
        
        # √âtape 6: Afficher les informations
        self.print_startup_info()
        
        try:
            # Attendre que les processus se terminent
            backend_process.wait()
            frontend_process.wait()
        except KeyboardInterrupt:
            logger.info("üõë Arr√™t du syst√®me...")
            backend_process.terminate()
            frontend_process.terminate()
        
        return True

def main():
    """Fonction principale"""
    starter = HackathonStarter()
    success = starter.run()
    
    if success:
        print("‚úÖ Syst√®me d√©marr√© avec succ√®s!")
    else:
        print("‚ùå √âchec du d√©marrage du syst√®me")
        sys.exit(1)

if __name__ == "__main__":
    main() 