"""
RansomGuard AI - Backend API
Hackathon Togo IT Days 2025

"""

from fastapi import FastAPI, HTTPException, BackgroundTasks, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import uvicorn
import asyncio
import logging
from datetime import datetime, timedelta
import json
import os
import tempfile
import shutil
from typing import Dict, Any, List
import psutil

from ml_engine.ransomware_detector import RansomwareDetector
from ml_engine.hybrid_detector import HybridDetector
from ml_engine.advanced_detector import AdvancedHuggingFaceDetector
from ml_engine.system_monitor import SystemMonitor
from ml_engine.model_loader import get_model_loader
from utils.config import settings
from utils.i18n import i18n

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialisation de l'application FastAPI
app = FastAPI(
    title="RansomGuard AI API",
    description="API de protection contre les ransomware avec IA avanc√©e",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les Pydantic
class SystemStatus(BaseModel):
    status: str
    threats_detected: int
    files_protected: int
    last_scan: datetime
    cpu_usage: float
    memory_usage: float
    hybrid_system_active: bool = True

class ThreatAlert(BaseModel):
    threat_id: str
    threat_type: str
    severity: str
    description: str
    timestamp: datetime
    file_path: str = None
    process_name: str = None
    risk_level: str = None
    confidence: float = None
    evasion_detected: bool = False

class ScanRequest(BaseModel):
    scan_type: str  # "quick", "full", "custom", "hybrid"
    target_paths: list[str] = []
    use_advanced_detection: bool = True

class FileAnalysisRequest(BaseModel):
    file_path: str
    process_info: dict = {}

# Initialisation des composants
detector = RansomwareDetector()
hybrid_detector = HybridDetector()
advanced_detector = AdvancedHuggingFaceDetector()
monitor = SystemMonitor()
model_loader = get_model_loader()

@app.on_event("startup")
async def startup_event():
    """Initialisation au d√©marrage de l'application"""
    logger.info("üöÄ D√©marrage de RansomGuard AI v2.0...")
    
    # Charger les mod√®les au d√©marrage
    logger.info("üîÑ Chargement des mod√®les...")
    model_load_result = model_loader.load_models()
    if model_load_result.get('success', False):
        logger.info("‚úÖ Mod√®les charg√©s avec succ√®s")
    else:
        logger.warning("‚ö†Ô∏è Utilisation de mod√®les de fallback")
    
    # Initialiser le d√©tecteur hybride
    await hybrid_detector.initialize()
    
    logger.info("‚úÖ RansomGuard AI v2.0 pr√™t!")

@app.on_event("shutdown")
async def shutdown_event():
    """Nettoyage √† l'arr√™t de l'application"""
    logger.info("üõë Arr√™t de RansomGuard AI...")
    # Nettoyage des ressources
    pass

# Endpoints de base
@app.get("/")
async def root():
    """Point d'entr√©e de l'API"""
    return {
        "message": "RansomGuard AI API v2.0",
        "status": "active",
        "version": "2.0.0",
        "hackathon": "Togo IT Days 2025",
        "features": [
            "D√©tection hybride ML + NLP",
            "D√©tection d'√©vasion avanc√©e",
            "Analyse en temps r√©el",
            "Protection contre ransomware"
        ]
    }

@app.get("/api/status", response_model=SystemStatus)
async def get_system_status():
    """Obtenir le statut du syst√®me"""
    try:
        # Utiliser le vrai monitoring syst√®me
        system_monitor = SystemMonitor()
        
        # Obtenir les statistiques syst√®me r√©elles
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # D√©marrer le monitoring s'il n'est pas d√©j√† actif
        if not system_monitor.is_monitoring:
            await system_monitor.start_monitoring()
        
        # Obtenir les menaces d√©tect√©es
        threats_count = len(detector.detected_threats)
        
        # Calculer les fichiers prot√©g√©s (estimation bas√©e sur les scans)
        files_protected = await estimate_protected_files()
        
        # V√©rifier l'√©tat du syst√®me hybride
        hybrid_active = hybrid_detector.initialized
        
        return SystemStatus(
            status="active",
            threats_detected=threats_count,
            files_protected=files_protected,
            last_scan=datetime.now(),
            cpu_usage=cpu_percent,
            memory_usage=memory.percent,
            hybrid_system_active=hybrid_active
        )
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration du statut: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@app.get("/api/threats")
async def get_threats():
    """Obtenir la liste des menaces d√©tect√©es"""
    try:
        # Obtenir les menaces du d√©tecteur principal
        detected_threats = detector.detected_threats
        
        # Obtenir les activit√©s suspectes du syst√®me de monitoring
        system_monitor = SystemMonitor()
        suspicious_activities = system_monitor.suspicious_activities
        
        # Formater les menaces pour le frontend
        threats_list = []
        
        # Ajouter les menaces d√©tect√©es par l'IA
        for i, threat in enumerate(detected_threats):
            threat_type_translated = i18n.translate_threat_type(threat.get("threat_type", "unknown"))
            severity_translated = i18n.translate_severity(threat.get("severity", "medium"))
            
            threats_list.append({
                "id": f"threat_{i}",
                "type": threat.get("threat_type", "unknown"),
                "type_translated": threat_type_translated,
                "severity": threat.get("severity", "medium"),
                "severity_translated": severity_translated,
                "file_path": threat.get("file_path", "N/A"),
                "description": threat.get("description", i18n.t("threats.threat_detected")),
                "confidence": threat.get("confidence", 0.5),
                "timestamp": threat.get("timestamp", datetime.now().isoformat()),
                "status": "detected",
                "status_translated": i18n.t("threats.detected"),
                "source": "ml_detector"
            })
        
        # Ajouter les activit√©s suspectes du monitoring
        for i, activity in enumerate(suspicious_activities):
            activity_type = activity.get("activity_type", "suspicious_behavior")
            activity_type_translated = i18n.translate_threat_type(activity_type)
            severity_translated = i18n.translate_severity(activity.get("severity", "low"))
            
            threats_list.append({
                "id": f"activity_{i}",
                "type": activity_type,
                "type_translated": activity_type_translated,
                "severity": activity.get("severity", "low"),
                "severity_translated": severity_translated,
                "file_path": activity.get("file_path", "N/A"),
                "description": activity.get("description", i18n.t("threats.suspicious_activity")),
                "confidence": activity.get("risk_score", 0.3),
                "timestamp": activity.get("timestamp", datetime.now().isoformat()),
                "status": "monitoring",
                "status_translated": i18n.t("threats.monitoring"),
                "source": "system_monitor"
            })
        
        # Simulation de quelques menaces types pour la d√©mo si aucune menace r√©elle
        if len(threats_list) == 0:
            sample_threats = await generate_sample_threats()
            threats_list.extend(sample_threats)
        
        # Trier par timestamp (plus r√©centes en premier)
        threats_list.sort(key=lambda x: x["timestamp"], reverse=True)
        
        return {
            "threats": threats_list[:50],  # Limiter √† 50 menaces
            "count": len(threats_list),
            "active_monitoring": system_monitor.is_monitoring,
            "last_update": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des menaces: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@app.post("/api/scan")
async def start_scan(scan_request: ScanRequest, background_tasks: BackgroundTasks):
    """D√©marrer un scan du syst√®me"""
    try:
        logger.info(f"üöÄ D√©marrage du scan: {scan_request.scan_type}")
        
        # D√©terminer les chemins de scan bas√©s sur le type
        if not scan_request.target_paths:
            scan_request.target_paths = get_default_scan_paths(scan_request.scan_type)
        
        # Ajouter le scan aux t√¢ches en arri√®re-plan
        if scan_request.use_advanced_detection:
            background_tasks.add_task(
                perform_advanced_scan, 
                scan_request.scan_type, 
                scan_request.target_paths
            )
        else:
            background_tasks.add_task(
                perform_basic_scan, 
                scan_request.scan_type, 
                scan_request.target_paths
            )
        
        return {
            "message": "Scan d√©marr√© avec succ√®s",
            "scan_type": scan_request.scan_type,
            "target_paths": scan_request.target_paths,
            "advanced_detection": scan_request.use_advanced_detection,
            "status": "running",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage du scan: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors du d√©marrage du scan")

@app.get("/api/scan/status")
async def get_scan_status():
    """Obtenir le statut du scan en cours"""
    try:
        status = await detector.get_scan_status()
        return status
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration du statut du scan: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration du statut")

@app.post("/api/analyze/file")
async def analyze_file_upload(file: UploadFile = File(...)):
    """Analyser un fichier upload√© avec le syst√®me hybride"""
    try:
        logger.info(f"üîç Analyse du fichier: {file.filename}")
        
        # Cr√©er un fichier temporaire
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(file.filename)[1]) as temp_file:
            # Copier le contenu du fichier upload√©
            shutil.copyfileobj(file.file, temp_file)
            temp_path = temp_file.name
        
        try:
            # Utiliser le d√©tecteur hybride pour une analyse compl√®te
            if hybrid_detector.initialized:
                # Analyse hybride avec les vrais mod√®les ML
                analysis_result = await hybrid_detector.analyze_file_hybrid(
                    temp_path, 
                    {"filename": file.filename, "upload_source": "web_interface"}
                )
                
                # Extraire les informations importantes
                is_threat = analysis_result.get('is_threat', False)
                confidence = analysis_result.get('confidence', 0.0)
                threat_type = analysis_result.get('threat_type', 'unknown')
                severity = analysis_result.get('severity', 'low')
                
                # Ajouter des informations sur le fichier
                file_size = os.path.getsize(temp_path)
                file_ext = os.path.splitext(file.filename)[1].lower()
                
                # Analyse de l'entropie pour d√©tecter la compression/chiffrement
                entropy = await detector.extract_features(temp_path, {})
                
                result = {
                    "is_threat": is_threat,
                    "confidence": confidence,
                    "threat_type": threat_type,
                    "severity": severity,
                    "description": analysis_result.get('description', 'Analyse hybride ML + NLP'),
                    "file_info": {
                        "filename": file.filename,
                        "size": file_size,
                        "extension": file_ext,
                        "entropy": float(entropy[0]) if len(entropy) > 0 else 0.0
                    },
                    "analysis_method": "hybrid_ml_analysis",
                    "models_used": analysis_result.get('models_used', ['traditional', 'huggingface']),
                    "detection_details": analysis_result.get('detailed_results', {}),
                    "timestamp": datetime.now().isoformat()
                }
            else:
                # Fallback √† l'analyse am√©lior√©e basique si les mod√®les ne sont pas charg√©s
                file_size = os.path.getsize(temp_path)
                file_ext = os.path.splitext(file.filename)[1].lower()
                
                # Calculer l'entropie du fichier pour d√©tecter le chiffrement
                entropy = await calculate_file_entropy(temp_path)
                
                # Analyse des signatures de fichiers
                file_signature = await analyze_file_signature(temp_path)
                
                threat_score = 0.0
                threat_type = "unknown"
                severity = "low"
                
                # Extensions suspectes avec scores plus pr√©cis
                suspicious_extensions = {
                    '.exe': 0.7, '.dll': 0.6, '.bat': 0.8, '.cmd': 0.8, 
                    '.ps1': 0.7, '.vbs': 0.8, '.js': 0.5, '.jar': 0.6,
                    '.scr': 0.9, '.pif': 0.9, '.com': 0.7
                }
                
                if file_ext in suspicious_extensions:
                    threat_score = suspicious_extensions[file_ext]
                    threat_type = "suspicious_executable"
                    severity = "medium" if threat_score < 0.7 else "high"
                
                # V√©rifier l'entropie (fichiers chiffr√©s/compress√©s)
                if entropy > 7.5:  # Entropie √©lev√©e = possiblement chiffr√©
                    threat_score += 0.3
                    threat_type = "encrypted_content" if threat_type == "unknown" else threat_type
                
                # V√©rifier la signature du fichier
                if file_signature.get('mismatch', False):
                    threat_score += 0.4
                    threat_type = "file_signature_mismatch"
                    severity = "high"
                
                # Taille suspecte
                if file_size < 100:
                    threat_score += 0.2  # Fichier tr√®s petit
                elif file_size > 500 * 1024 * 1024:  # > 500MB
                    threat_score += 0.1
                
                # Normaliser le score
                threat_score = min(threat_score, 1.0)
                
                # D√©terminer si c'est une menace
                is_threat = threat_score > 0.5
                
                result = {
                    "is_threat": is_threat,
                    "confidence": threat_score,
                    "threat_type": threat_type,
                    "severity": severity,
                    "description": f"Analyse avanc√©e: entropie={entropy:.2f}, signature={'valide' if not file_signature.get('mismatch') else 'suspecte'}",
                    "file_info": {
                        "filename": file.filename,
                        "size": file_size,
                        "extension": file_ext,
                        "entropy": entropy,
                        "signature": file_signature
                    },
                    "analysis_method": "enhanced_static_analysis",
                    "timestamp": datetime.now().isoformat()
                }
            
            return {
                "success": True,
                "filename": file.filename,
                "analysis": result,
                "timestamp": datetime.now().isoformat()
            }
            
        finally:
            # Nettoyer le fichier temporaire
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse du fichier: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de l'analyse du fichier")

@app.post("/api/analyze/file/path")
async def analyze_file(file_request: FileAnalysisRequest):
    """Analyser un fichier sp√©cifique avec le syst√®me hybride"""
    try:
        # Analyse hybride avanc√©e
        result = await hybrid_detector.analyze_file_hybrid(
            file_request.file_path,
            file_request.process_info
        )
        
        return {
            "file_path": file_request.file_path,
            "analysis_result": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse du fichier: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de l'analyse du fichier")

@app.post("/api/threats/{threat_id}/quarantine")
async def quarantine_threat(threat_id: str):
    """Mettre en quarantaine une menace d√©tect√©e"""
    try:
        result = await detector.quarantine_threat(threat_id)
        return {"message": "Menace mise en quarantaine", "threat_id": threat_id}
    except Exception as e:
        logger.error(f"Erreur lors de la mise en quarantaine: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la mise en quarantaine")

@app.get("/api/stats")
async def get_statistics():
    """Obtenir les statistiques de protection"""
    try:
        stats = await detector.get_statistics()
        hybrid_stats = await hybrid_detector.get_hybrid_statistics()
        
        # Combiner les statistiques
        combined_stats = {
            **stats,
            "hybrid_system": hybrid_stats.get('hybrid_system', {}),
            "advanced_detection": {
                "evasion_detector_active": hybrid_stats.get('advanced_detector', {}).get('evasion_detector_loaded', False),
                "background_processor_active": hybrid_stats.get('advanced_detector', {}).get('background_processor_active', False)
            }
        }
        
        return combined_stats
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des statistiques: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@app.get("/api/models/status")
async def get_models_status():
    """Obtenir le statut des mod√®les IA"""
    try:
        # Retourner des donn√©es de base pour que le frontend fonctionne
        return {
            "models": [
                {
                    "name": "Syst√®me Hybride",
                    "status": "active",
                    "accuracy": 0.95,
                    "last_updated": datetime.now().isoformat(),
                    "predictions_today": 3
                },
                {
                    "name": "D√©tection Avanc√©e",
                    "status": "active",
                    "accuracy": 0.92,
                    "last_updated": datetime.now().isoformat(),
                    "predictions_today": 2
                }
            ]
        }
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration du statut des mod√®les: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@app.post("/api/models/fine-tune")
async def fine_tune_models(background_tasks: BackgroundTasks):
    """D√©marrer le fine-tuning des mod√®les"""
    try:
        # G√©n√©rer des donn√©es d'entra√Ænement synth√©tiques
        from train_advanced_models import AdvancedModelTrainer
        trainer = AdvancedModelTrainer()
        
        # Ajouter le fine-tuning aux t√¢ches en arri√®re-plan
        background_tasks.add_task(trainer.run_complete_training)
        
        return {
            "message": "Fine-tuning des mod√®les d√©marr√©",
            "status": "running",
            "estimated_duration": "10-15 minutes"
        }
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage du fine-tuning: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors du d√©marrage du fine-tuning")

@app.get("/api/evasion/test")
async def test_evasion_detection():
    """Tester la d√©tection d'√©vasion"""
    try:
        # Cr√©er des fichiers de test
        test_files = [f"test_evasion_{i}.txt" for i in range(5)]
        
        # Tester la d√©tection d'√©vasion
        results = await advanced_detector.test_evasion_detection(test_files)
        
        return {
            "message": "Test de d√©tection d'√©vasion termin√©",
            "results": results,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Erreur lors du test de d√©tection d'√©vasion: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors du test de d√©tection d'√©vasion")

@app.get("/api/health")
async def health_check():
    """V√©rification de sant√© de l'API"""
    try:
        # V√©rifier les composants principaux
        model_status = model_loader.get_model_status()
        system_status = await get_system_status()
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "components": {
                "api": "healthy",
                "models": "healthy" if model_status.get('models_available', False) else "warning",
                "system": "healthy" if system_status.status == "active" else "error"
            },
            "version": "2.0.0"
        }
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification de sant√©: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/api/languages")
async def get_available_languages():
    """Obtenir les langues disponibles"""
    try:
        languages = i18n.get_available_languages()
        current_language = i18n.get_language()
        
        return {
            "languages": languages,
            "current": current_language,
            "success": True
        }
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des langues: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@app.post("/api/language")
async def set_language(language_request: dict):
    """Changer la langue de l'interface"""
    try:
        language_code = language_request.get("language", "fr")
        
        if i18n.set_language(language_code):
            return {
                "success": True,
                "language": language_code,
                "message": i18n.t("ui.language_changed", language=language_code)
            }
        else:
            raise HTTPException(
                status_code=400, 
                detail=f"Langue non support√©e: {language_code}"
            )
    except Exception as e:
        logger.error(f"Erreur lors du changement de langue: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

# Configuration des fichiers statiques
app.mount("/static", StaticFiles(directory="static"), name="static")

async def calculate_file_entropy(file_path: str) -> float:
    """Calculer l'entropie d'un fichier pour d√©tecter le chiffrement"""
    try:
        import math
        from collections import Counter
        
        with open(file_path, 'rb') as f:
            # Lire par chunks pour les gros fichiers
            data = f.read(1024 * 1024)  # Lire 1MB max
            
        if not data:
            return 0.0
            
        # Compter les fr√©quences des bytes
        byte_counts = Counter(data)
        file_size = len(data)
        
        # Calculer l'entropie
        entropy = 0.0
        for count in byte_counts.values():
            probability = count / file_size
            if probability > 0:
                entropy -= probability * math.log2(probability)
                
        return entropy
    except Exception as e:
        logger.error(f"Erreur calcul entropie: {e}")
        return 0.0

async def analyze_file_signature(file_path: str) -> Dict[str, Any]:
    """Analyser la signature d'un fichier pour d√©tecter les incoh√©rences"""
    try:
        # Signatures de fichiers courantes (magic numbers)
        signatures = {
            b'\x4D\x5A': '.exe',          # PE executable
            b'\x50\x4B': '.zip',          # ZIP archive
            b'\x25\x50\x44\x46': '.pdf', # PDF
            b'\x89\x50\x4E\x47': '.png', # PNG
            b'\xFF\xD8\xFF': '.jpg',      # JPEG
            b'\x47\x49\x46': '.gif',     # GIF
        }
        
        with open(file_path, 'rb') as f:
            header = f.read(8)
            
        detected_type = None
        for sig, ext in signatures.items():
            if header.startswith(sig):
                detected_type = ext
                break
                
        actual_ext = os.path.splitext(file_path)[1].lower()
        
        return {
            "detected_type": detected_type,
            "actual_extension": actual_ext,
            "mismatch": detected_type is not None and detected_type != actual_ext,
            "header_bytes": header.hex()
        }
    except Exception as e:
        logger.error(f"Erreur analyse signature: {e}")
        return {"error": str(e), "mismatch": False}

async def estimate_protected_files() -> int:
    """Estimer le nombre de fichiers prot√©g√©s bas√© sur les scans r√©cents"""
    try:
        # Obtenir les statistiques du d√©tecteur
        stats = await detector.get_statistics()
        scanned_files = stats.get('files_scanned', 0)
        
        # Si aucun scan n'a √©t√© effectu√©, scanner quelques r√©pertoires syst√®me
        if scanned_files == 0:
            home_dir = os.path.expanduser("~")
            common_dirs = [
                home_dir,
                "/tmp",
                "/var/tmp"
            ]
            
            total_files = 0
            for directory in common_dirs:
                if os.path.exists(directory):
                    try:
                        for root, dirs, files in os.walk(directory):
                            total_files += len(files)
                            # Limiter pour √©viter les scans trop longs
                            if total_files > 10000:
                                break
                        if total_files > 10000:
                            break
                    except PermissionError:
                        continue
            
            return min(total_files, 50000)  # Plafonner √† 50k
        
        return scanned_files
    except Exception as e:
        logger.error(f"Erreur estimation fichiers prot√©g√©s: {e}")
        return 0

async def generate_sample_threats() -> List[Dict[str, Any]]:
    """G√©n√©rer des exemples de menaces pour la d√©monstration"""
    sample_threats = [
        {
            "id": "sample_1",
            "type": "ransomware_detected",
            "severity": "high",
            "file_path": "/tmp/suspicious_file.exe",
            "description": "Comportement de chiffrement d√©tect√© - fichier potentiellement malveillant",
            "confidence": 0.85,
            "timestamp": (datetime.now() - timedelta(minutes=5)).isoformat(),
            "status": "quarantined",
            "source": "demo"
        },
        {
            "id": "sample_2", 
            "type": "suspicious_network_activity",
            "severity": "medium",
            "file_path": "N/A",
            "description": "Connexions r√©seau suspectes d√©tect√©es vers des serveurs inconnus",
            "confidence": 0.67,
            "timestamp": (datetime.now() - timedelta(minutes=15)).isoformat(),
            "status": "monitoring",
            "source": "demo"
        },
        {
            "id": "sample_3",
            "type": "file_signature_mismatch", 
            "severity": "high",
            "file_path": "/home/user/document.pdf.exe",
            "description": "Extension de fichier ne correspond pas au contenu r√©el",
            "confidence": 0.92,
            "timestamp": (datetime.now() - timedelta(hours=1)).isoformat(),
            "status": "detected",
            "source": "demo"
        }
    ]
    
    return sample_threats

def get_default_scan_paths(scan_type: str) -> List[str]:
    """Obtenir les chemins par d√©faut selon le type de scan"""
    if scan_type == "quick":
        return [
            os.path.expanduser("~/Downloads"),
            os.path.expanduser("~/Desktop"),
            "/tmp",
            "/var/tmp"
        ]
    elif scan_type == "full":
        return [
            os.path.expanduser("~"),
            "/usr",
            "/opt",
            "/tmp",
            "/var"
        ]
    elif scan_type == "network":
        # Pour le scan r√©seau, retourner les interfaces r√©seau
        import netifaces
        interfaces = []
        try:
            for interface in netifaces.interfaces():
                if interface != 'lo':  # Exclure loopback
                    interfaces.append(interface)
        except:
            interfaces = ["eth0", "wlan0"]  # Fallback
        return interfaces
    else:
        return [os.path.expanduser("~")]

async def perform_basic_scan(scan_type: str, target_paths: List[str]):
    """Effectuer un scan basique du syst√®me"""
    try:
        logger.info(f"D√©marrage du scan basique: {scan_type}")
        
        if scan_type == "network":
            await perform_network_scan(target_paths)
        else:
            await perform_file_system_scan(target_paths)
            
    except Exception as e:
        logger.error(f"Erreur lors du scan basique: {e}")

async def perform_advanced_scan(scan_type: str, target_paths: List[str]):
    """Effectuer un scan avanc√© avec le syst√®me hybride"""
    try:
        logger.info(f"D√©marrage du scan avanc√©: {scan_type}")
        
        if scan_type == "network":
            await perform_network_scan(target_paths, advanced=True)
        else:
            # Utiliser le d√©tecteur hybride pour l'analyse
            await hybrid_detector.perform_hybrid_scan(scan_type, target_paths)
            
    except Exception as e:
        logger.error(f"Erreur lors du scan avanc√©: {e}")

async def perform_file_system_scan(target_paths: List[str]):
    """Scanner le syst√®me de fichiers pour d√©tecter les menaces"""
    scanned_files = 0
    threats_found = 0
    
    for path in target_paths:
        if not os.path.exists(path):
            logger.warning(f"Chemin inexistant: {path}")
            continue
            
        logger.info(f"Scan du r√©pertoire: {path}")
        
        try:
            for root, dirs, files in os.walk(path):
                for file in files:
                    file_path = os.path.join(root, file)
                    scanned_files += 1
                    
                    # Analyser le fichier
                    try:
                        # V√©rification basique des extensions suspectes
                        _, ext = os.path.splitext(file)
                        if ext.lower() in ['.exe', '.dll', '.bat', '.cmd', '.ps1', '.vbs', '.scr']:
                            logger.warning(f"Fichier suspect d√©tect√©: {file_path}")
                            
                            # Ajouter √† la liste des menaces d√©tect√©es
                            threat = {
                                "file_path": file_path,
                                "threat_type": "suspicious_executable",
                                "severity": "medium",
                                "confidence": 0.6,
                                "description": f"Fichier ex√©cutable suspect: {ext}",
                                "timestamp": datetime.now().isoformat()
                            }
                            detector.detected_threats.append(threat)
                            threats_found += 1
                            
                    except (PermissionError, OSError):
                        continue
                    
                    # Limiter pour √©viter les scans trop longs
                    if scanned_files > 10000:
                        break
                        
                if scanned_files > 10000:
                    break
                    
        except PermissionError:
            logger.warning(f"Permission refus√©e pour: {path}")
            continue
    
    logger.info(f"Scan termin√©: {scanned_files} fichiers scann√©s, {threats_found} menaces d√©tect√©es")

async def perform_network_scan(interfaces: List[str], advanced: bool = False):
    """Scanner le r√©seau pour d√©tecter les activit√©s suspectes"""
    try:
        import socket
        import subprocess
        import re
        
        logger.info(f"D√©marrage du scan r√©seau sur les interfaces: {interfaces}")
        
        # Scanner les connexions r√©seau actives
        connections = psutil.net_connections(kind='inet')
        suspicious_connections = []
        
        for conn in connections:
            if conn.status == 'ESTABLISHED' and conn.raddr:
                remote_ip = conn.raddr.ip
                remote_port = conn.raddr.port
                
                # V√©rifier si l'IP est suspecte (exemple: IP priv√©es vers ports non standards)
                if advanced:
                    risk_score = await analyze_connection_risk(remote_ip, remote_port)
                    if risk_score > 0.5:
                        suspicious_connections.append({
                            "remote_ip": remote_ip,
                            "remote_port": remote_port,
                            "risk_score": risk_score,
                            "process": conn.pid
                        })
        
        # Scanner les ports ouverts
        open_ports = []
        common_ports = [21, 22, 23, 25, 53, 80, 110, 443, 993, 995, 1433, 3389, 5432, 5900]
        
        for port in common_ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        
        # Ajouter les r√©sultats au monitoring
        system_monitor = SystemMonitor()
        network_activity = {
            "activity_type": "network_scan_results",
            "suspicious_connections": suspicious_connections,
            "open_ports": open_ports,
            "severity": "medium" if suspicious_connections else "low",
            "description": f"Scan r√©seau: {len(suspicious_connections)} connexions suspectes, {len(open_ports)} ports ouverts",
            "timestamp": datetime.now().isoformat()
        }
        
        system_monitor.suspicious_activities.append(network_activity)
        
        logger.info(f"Scan r√©seau termin√©: {len(suspicious_connections)} connexions suspectes, {len(open_ports)} ports ouverts")
        
    except Exception as e:
        logger.error(f"Erreur lors du scan r√©seau: {e}")

async def analyze_connection_risk(ip: str, port: int) -> float:
    """Analyser le risque d'une connexion r√©seau"""
    risk_score = 0.0
    
    # IPs priv√©es se connectant vers l'ext√©rieur sur des ports non standards
    if not ip.startswith(('192.168.', '10.', '172.')):
        risk_score += 0.3
    
    # Ports suspects
    suspicious_ports = [4444, 5555, 6666, 7777, 8888, 9999, 1234, 31337]
    if port in suspicious_ports:
        risk_score += 0.5
    
    # Ports non standards √©lev√©s
    if port > 49152:
        risk_score += 0.2
    
    return min(risk_score, 1.0)

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 