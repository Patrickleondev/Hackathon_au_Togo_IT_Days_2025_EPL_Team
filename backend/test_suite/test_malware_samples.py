"""
Test complet des √©chantillons de malwares
RansomGuard AI - Hackathon Togo IT Days 2025
"""

import asyncio
import os
import logging
from ml_engine.ultra_detector import UltraDetector

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_malware_samples():
    """Tester tous les √©chantillons de malwares"""
    try:
        logger.info("üöÄ Test complet des √©chantillons de malwares...")
        
        # Initialiser le d√©tecteur
        detector = UltraDetector()
        
        # Liste des fichiers √† tester
        test_files = [
            "test_malware_samples/malicious_python.py",
            "test_malware_samples/malicious_batch.bat",
            "test_malware_samples/malicious_js.js",
            "test_malware_samples/malicious_dll.dll",
            "test_malware_samples/malicious_exe.exe",
            "test_malware_samples/obfuscated_python.py",
            "test_malware_samples/packed_binary.bin"
        ]
        
        results = []
        
        for file_path in test_files:
            if os.path.exists(file_path):
                logger.info(f"üîç Test: {file_path}")
                
                try:
                    result = await detector.analyze_file_ultra(file_path, {})
                    
                    # Afficher les r√©sultats
                    logger.info(f"  ‚Ä¢ Menace d√©tect√©e: {result.get('is_threat', False)}")
                    logger.info(f"  ‚Ä¢ Confiance: {result.get('confidence', 0.0):.2f}")
                    logger.info(f"  ‚Ä¢ M√©thode: {result.get('analysis_method', 'unknown')}")
                    
                    # D√©tails suppl√©mentaires
                    if 'file_type' in result:
                        file_type = result['file_type']
                        logger.info(f"  ‚Ä¢ Type: {file_type.get('language', 'unknown')}")
                        logger.info(f"  ‚Ä¢ Binaire: {file_type.get('is_binary', False)}")
                    
                    if 'patterns_analysis' in result:
                        patterns = result['patterns_analysis']
                        logger.info(f"  ‚Ä¢ Patterns trouv√©s: {patterns.get('found_count', 0)}")
                    
                    if 'strings_analysis' in result:
                        strings = result['strings_analysis']
                        logger.info(f"  ‚Ä¢ Strings suspects: {strings.get('suspicious_count', 0)}")
                    
                    results.append({
                        'file': file_path,
                        'is_threat': result.get('is_threat', False),
                        'confidence': result.get('confidence', 0.0),
                        'method': result.get('analysis_method', 'unknown')
                    })
                    
                except Exception as e:
                    logger.error(f"  ‚ùå Erreur: {e}")
                    results.append({
                        'file': file_path,
                        'is_threat': False,
                        'confidence': 0.0,
                        'method': 'error',
                        'error': str(e)
                    })
            else:
                logger.warning(f"‚ö†Ô∏è Fichier non trouv√©: {file_path}")
        
        # R√©sum√© des r√©sultats
        logger.info("\nüìä R√âSUM√â DES TESTS:")
        logger.info("=" * 50)
        
        detected_count = 0
        total_count = len(results)
        
        for result in results:
            status = "‚úÖ D√âTECT√â" if result['is_threat'] else "‚ùå NON D√âTECT√â"
            confidence = f"{result['confidence']:.2f}"
            method = result['method']
            
            logger.info(f"{status} | {confidence} | {method} | {result['file']}")
            
            if result['is_threat']:
                detected_count += 1
        
        # Statistiques
        detection_rate = (detected_count / total_count) * 100 if total_count > 0 else 0
        logger.info("=" * 50)
        logger.info(f"üéØ Taux de d√©tection: {detection_rate:.1f}% ({detected_count}/{total_count})")
        
        if detection_rate >= 80:
            logger.info("‚úÖ EXCELLENT - Syst√®me tr√®s efficace !")
        elif detection_rate >= 60:
            logger.info("‚úÖ BON - Syst√®me efficace")
        elif detection_rate >= 40:
            logger.info("‚ö†Ô∏è MOYEN - Am√©lioration n√©cessaire")
        else:
            logger.info("‚ùå FAIBLE - Am√©lioration urgente n√©cessaire")
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test: {e}")
        raise

async def main():
    """Fonction principale"""
    await test_malware_samples()

if __name__ == "__main__":
    asyncio.run(main())
