#!/usr/bin/env python3
"""
Script de d√©marrage de l'entra√Ænement des mod√®les
RansomGuard AI - Hackathon Togo IT Days 2025
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """Fonction principale pour d√©marrer l'entra√Ænement"""
    try:
        logger.info("üöÄ D√©marrage de l'entra√Ænement des mod√®les pour le hackathon...")
        
        # V√©rifier que nous sommes dans le bon r√©pertoire
        if not os.path.exists("train_models_for_hackathon.py"):
            logger.error("‚ùå Script d'entra√Ænement non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire backend/")
            sys.exit(1)
        
        # Cr√©er le dossier models s'il n'existe pas
        models_dir = Path("models")
        models_dir.mkdir(exist_ok=True)
        logger.info(f"üìÅ Dossier models cr√©√©/v√©rifi√©: {models_dir.absolute()}")
        
        # Importer et ex√©cuter l'entra√Ænement
        from train_models_for_hackathon import main as train_main
        
        logger.info("üîÑ Lancement de l'entra√Ænement unifi√©...")
        asyncio.run(train_main())
        
        logger.info("‚úÖ Entra√Ænement termin√© avec succ√®s!")
        
        # V√©rifier les fichiers cr√©√©s
        model_files = list(models_dir.glob("*.pkl"))
        metadata_files = list(models_dir.glob("*.json"))
        
        logger.info(f"üìä Fichiers de mod√®les cr√©√©s: {len(model_files)}")
        for file in model_files:
            logger.info(f"  - {file.name}")
        
        logger.info(f"üìã Fichiers de m√©tadonn√©es cr√©√©s: {len(metadata_files)}")
        for file in metadata_files:
            logger.info(f"  - {file.name}")
        
        # V√©rifier le mod√®le frontend unifi√©
        frontend_model = models_dir / "frontend_unified_model.pkl"
        if frontend_model.exists():
            logger.info("‚úÖ Mod√®le frontend unifi√© cr√©√© avec succ√®s!")
        else:
            logger.warning("‚ö†Ô∏è Mod√®le frontend unifi√© non trouv√©")
        
        logger.info("\nüéØ Les mod√®les sont pr√™ts pour l'utilisation!")
        logger.info("üí° Vous pouvez maintenant lancer le backend avec: python main.py")
        
    except ImportError as e:
        logger.error(f"‚ùå Erreur d'import: {e}")
        logger.error("Assurez-vous que toutes les d√©pendances sont install√©es:")
        logger.error("pip install -r requirements.txt")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 