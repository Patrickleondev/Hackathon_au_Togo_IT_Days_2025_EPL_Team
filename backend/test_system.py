#!/usr/bin/env python3
"""
Script de test pour RansomGuard AI
Hackathon Togo IT Days 2025
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_system_components():
    """Tester les composants du syst√®me"""
    logger.info("üöÄ Test des composants RansomGuard AI...")
    
    # Test 1: V√©rification des imports
    try:
        logger.info("üì¶ Test des imports...")
        from ml_engine.ransomware_detector import RansomwareDetector
        from ml_engine.hybrid_detector import HybridDetector
        from ml_engine.ultra_detector import UltraDetector
        from ml_engine.system_monitor import SystemMonitor
        logger.info("‚úÖ Imports r√©ussis")
    except ImportError as e:
        logger.error(f"‚ùå Erreur d'import: {e}")
        return False
    
    # Test 2: Initialisation des d√©tecteurs
    try:
        logger.info("üîç Test des d√©tecteurs...")
        detector = RansomwareDetector()
        hybrid_detector = HybridDetector()
        ultra_detector = UltraDetector()
        monitor = SystemMonitor()
        logger.info("‚úÖ D√©tecteurs initialis√©s")
    except Exception as e:
        logger.error(f"‚ùå Erreur d'initialisation: {e}")
        return False
    
    # Test 3: V√©rification des mod√®les
    try:
        logger.info("ü§ñ Test des mod√®les...")
        from ml_engine.model_loader import get_model_loader
        model_loader = get_model_loader()
        model_status = model_loader.get_model_status()
        logger.info(f"‚úÖ Statut des mod√®les: {model_status}")
    except Exception as e:
        logger.error(f"‚ùå Erreur des mod√®les: {e}")
        return False
    
    # Test 4: V√©rification des fichiers de d√©tection
    try:
        logger.info("üìÅ Test des fichiers de d√©tection...")
        detection_paths = [
            "detections/sigma",
            "detections/suricata", 
            "detections/yara",
            "detections/sysmon"
        ]
        
        for path in detection_paths:
            if os.path.exists(path):
                files = os.listdir(path)
                logger.info(f"‚úÖ {path}: {len(files)} fichiers")
            else:
                logger.warning(f"‚ö†Ô∏è {path}: non trouv√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur fichiers de d√©tection: {e}")
    
    # Test 5: V√©rification des donn√©es d'intelligence des menaces
    try:
        logger.info("üïµÔ∏è Test de l'intelligence des menaces...")
        threat_data_paths = [
            "data/threat_intelligence/malicious_domains.json",
            "data/threat_intelligence/malicious_ips.json",
            "data/threat_intelligence/malicious_hashes.json"
        ]
        
        for path in threat_data_paths:
            if os.path.exists(path):
                size = os.path.getsize(path)
                logger.info(f"‚úÖ {path}: {size} bytes")
            else:
                logger.warning(f"‚ö†Ô∏è {path}: non trouv√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur intelligence des menaces: {e}")
    
    # Test 6: Test de d√©tection basique
    try:
        logger.info("üß™ Test de d√©tection basique...")
        
        # Cr√©er un fichier de test
        test_file = "test_malware_sample.txt"
        with open(test_file, "w") as f:
            f.write("This is a test file for RansomGuard AI")
        
        # Analyser avec le d√©tecteur ultra
        result = await ultra_detector.analyze_file_ultra(test_file, {})
        logger.info(f"‚úÖ Analyse de test: {result.get('is_threat', False)}")
        
        # Nettoyer
        os.remove(test_file)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test de d√©tection: {e}")
    
    logger.info("üéâ Tests termin√©s!")
    return True

async def test_file_analysis():
    """Tester l'analyse de fichiers"""
    logger.info("üìÑ Test de l'analyse de fichiers...")
    
    try:
        from ml_engine.ultra_detector import UltraDetector
        ultra_detector = UltraDetector()
        
        # Cr√©er des fichiers de test avec diff√©rents contenus
        test_files = [
            ("test_python.py", "import os\nos.system('echo hello')"),
            ("test_batch.bat", "@echo off\ndel /s *.*"),
            ("test_js.js", "eval('alert(1)')"),
            ("test_normal.txt", "Ceci est un fichier normal")
        ]
        
        for filename, content in test_files:
            with open(filename, "w") as f:
                f.write(content)
            
            try:
                result = await ultra_detector.analyze_file_ultra(filename, {})
                threat_level = "üî¥" if result.get('is_threat', False) else "üü¢"
                logger.info(f"{threat_level} {filename}: {result.get('threat_type', 'unknown')} (conf: {result.get('confidence', 0):.2f})")
            except Exception as e:
                logger.error(f"‚ùå Erreur analyse {filename}: {e}")
            finally:
                if os.path.exists(filename):
                    os.remove(filename)
                    
    except Exception as e:
        logger.error(f"‚ùå Erreur test d'analyse: {e}")

async def test_monitoring():
    """Tester le monitoring syst√®me"""
    logger.info("üìä Test du monitoring syst√®me...")
    
    try:
        from system_access import system_access
        
        # Obtenir les infos syst√®me
        sys_info = system_access.get_system_info()
        logger.info(f"‚úÖ OS: {sys_info.get('os_type', 'Unknown')}")
        logger.info(f"‚úÖ Admin: {sys_info.get('is_admin', False)}")
        logger.info(f"‚úÖ Capacit√©s: {sys_info.get('capabilities', [])}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur monitoring: {e}")

async def main():
    """Fonction principale de test"""
    logger.info("üß™ D√©marrage des tests RansomGuard AI...")
    
    # Test des composants
    success = await test_system_components()
    
    if success:
        # Test de l'analyse de fichiers
        await test_file_analysis()
        
        # Test du monitoring
        await test_monitoring()
        
        logger.info("üéØ Tous les tests sont pass√©s avec succ√®s!")
    else:
        logger.error("üí• Certains tests ont √©chou√©")
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Tests interrompus par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur fatale: {e}")
        sys.exit(1)
