#!/usr/bin/env python3
"""
Syst√®me de monitoring unifi√© pour RansomGuard AI
Int√®gre la surveillance des processus, fichiers, registre et r√©seau
"""

import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import os

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import des moniteurs
try:
    from real_process_monitor import RealProcessMonitor, process_monitor
    PROCESS_MONITOR_AVAILABLE = True
    logger.info("‚úÖ Moniteur de processus disponible")
except ImportError as e:
    PROCESS_MONITOR_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Moniteur de processus non disponible: {e}")

try:
    from real_file_monitor import RealFileMonitor, file_monitor
    FILE_MONITOR_AVAILABLE = True
    logger.info("‚úÖ Moniteur de fichiers disponible")
except ImportError as e:
    FILE_MONITOR_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Moniteur de fichiers non disponible: {e}")

try:
    from real_registry_monitor import RealRegistryMonitor, registry_monitor
    REGISTRY_MONITOR_AVAILABLE = True
    logger.info("‚úÖ Moniteur de registre disponible")
except ImportError as e:
    REGISTRY_MONITOR_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Moniteur de registre non disponible: {e}")

try:
    from system_access.network_monitor import NetworkMonitor
    NETWORK_MONITOR_AVAILABLE = True
    logger.info("‚úÖ Moniteur r√©seau disponible")
except ImportError as e:
    NETWORK_MONITOR_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Moniteur r√©seau non disponible: {e}")

@dataclass
class SystemStatus:
    """Statut global du syst√®me"""
    overall_status: str  # "HEALTHY", "WARNING", "CRITICAL"
    total_threats: int
    active_monitors: int
    last_scan: datetime
    system_health_score: float  # 0.0 √† 1.0
    recommendations: List[str]

@dataclass
class ThreatSummary:
    """R√©sum√© des menaces d√©tect√©es"""
    threat_type: str  # "process", "file", "registry", "network"
    count: int
    severity: str  # "LOW", "MEDIUM", "HIGH", "CRITICAL"
    description: str
    last_detected: datetime

class UnifiedSystemMonitor:
    """Syst√®me de monitoring unifi√©"""
    
    def __init__(self):
        self.monitors = {}
        self.monitoring_active = False
        self.system_status = SystemStatus(
            overall_status="UNKNOWN",
            total_threats=0,
            active_monitors=0,
            last_scan=datetime.now(),
            system_health_score=1.0,
            recommendations=[]
        )
        
        # Initialiser les moniteurs disponibles
        self.init_monitors()
    
    def init_monitors(self):
        """Initialiser les moniteurs disponibles"""
        if PROCESS_MONITOR_AVAILABLE:
            self.monitors['process'] = process_monitor
            logger.info("‚úÖ Moniteur de processus initialis√©")
        
        if FILE_MONITOR_AVAILABLE:
            self.monitors['file'] = file_monitor
            logger.info("‚úÖ Moniteur de fichiers initialis√©")
        
        if REGISTRY_MONITOR_AVAILABLE:
            self.monitors['registry'] = registry_monitor
            logger.info("‚úÖ Moniteur de registre initialis√©")
        
        if NETWORK_MONITOR_AVAILABLE:
            try:
                self.monitors['network'] = NetworkMonitor()
                logger.info("‚úÖ Moniteur r√©seau initialis√©")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur initialisation moniteur r√©seau: {e}")
        
        logger.info(f"üéØ {len(self.monitors)} moniteurs initialis√©s")
    
    async def start_all_monitoring(self):
        """D√©marrer tous les moniteurs"""
        logger.info("üöÄ D√©marrage de tous les moniteurs...")
        self.monitoring_active = True
        
        # D√©marrer les moniteurs en parall√®le
        monitor_tasks = []
        
        for monitor_name, monitor in self.monitors.items():
            try:
                if hasattr(monitor, 'start_monitoring'):
                    task = asyncio.create_task(monitor.start_monitoring())
                    monitor_tasks.append((monitor_name, task))
                    logger.info(f"‚úÖ {monitor_name} d√©marr√©")
                else:
                    logger.warning(f"‚ö†Ô∏è {monitor_name} n'a pas de m√©thode start_monitoring")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors du d√©marrage de {monitor_name}: {e}")
        
        # Attendre que tous les moniteurs soient pr√™ts
        await asyncio.sleep(5)
        
        # D√©marrer la surveillance globale
        global_monitor_task = asyncio.create_task(self.global_monitoring())
        
        try:
            # Attendre que la surveillance globale se termine
            await global_monitor_task
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur...")
        finally:
            # Arr√™ter tous les moniteurs
            await self.stop_all_monitoring()
            for monitor_name, task in monitor_tasks:
                task.cancel()
            global_monitor_task.cancel()
            logger.info("‚úÖ Tous les moniteurs arr√™t√©s")
    
    async def stop_all_monitoring(self):
        """Arr√™ter tous les moniteurs"""
        logger.info("üõë Arr√™t de tous les moniteurs...")
        self.monitoring_active = False
        
        for monitor_name, monitor in self.monitors.items():
            try:
                if hasattr(monitor, 'stop_monitoring'):
                    monitor.stop_monitoring()
                    logger.info(f"‚úÖ {monitor_name} arr√™t√©")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'arr√™t de {monitor_name}: {e}")
    
    async def global_monitoring(self):
        """Surveillance globale du syst√®me"""
        logger.info("üåç D√©marrage de la surveillance globale...")
        
        while self.monitoring_active:
            try:
                # Mettre √† jour le statut global
                await self.update_system_status()
                
                # V√©rifier la sant√© du syst√®me
                await self.check_system_health()
                
                # G√©n√©rer des recommandations
                await self.generate_recommendations()
                
                # Attendre avant la prochaine v√©rification
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la surveillance globale: {e}")
                await asyncio.sleep(30)
    
    async def update_system_status(self):
        """Mettre √† jour le statut global du syst√®me"""
        try:
            total_threats = 0
            active_monitors = 0
            
            # Compter les menaces et moniteurs actifs
            for monitor_name, monitor in self.monitors.items():
                try:
                    if hasattr(monitor, 'monitoring_active') and monitor.monitoring_active:
                        active_monitors += 1
                    
                    # Compter les menaces selon le type de moniteur
                    if monitor_name == 'process' and hasattr(monitor, 'suspicious_processes'):
                        total_threats += len(monitor.suspicious_processes)
                    elif monitor_name == 'file' and hasattr(monitor, 'suspicious_operations'):
                        total_threats += len(monitor.suspicious_operations)
                    elif monitor_name == 'registry' and hasattr(monitor, 'suspicious_operations'):
                        total_threats += len(monitor.suspicious_operations)
                    elif monitor_name == 'network' and hasattr(monitor, 'suspicious_connections'):
                        total_threats += len(monitor.suspicious_connections)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors de la v√©rification de {monitor_name}: {e}")
            
            # Mettre √† jour le statut
            self.system_status.total_threats = total_threats
            self.system_status.active_monitors = active_monitors
            self.system_status.last_scan = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la mise √† jour du statut: {e}")
    
    async def check_system_health(self):
        """V√©rifier la sant√© globale du syst√®me"""
        try:
            health_score = 1.0
            issues = []
            
            # V√©rifier les moniteurs
            if len(self.monitors) == 0:
                health_score -= 0.5
                issues.append("Aucun moniteur disponible")
            
            # V√©rifier les menaces
            if self.system_status.total_threats > 10:
                health_score -= 0.3
                issues.append("Nombre √©lev√© de menaces d√©tect√©es")
            elif self.system_status.total_threats > 5:
                health_score -= 0.1
                issues.append("Menaces mod√©r√©es d√©tect√©es")
            
            # V√©rifier les moniteurs actifs
            if self.system_status.active_monitors < len(self.monitors):
                health_score -= 0.2
                issues.append("Certains moniteurs ne sont pas actifs")
            
            # Limiter le score de sant√©
            health_score = max(0.0, health_score)
            
            # D√©terminer le statut global
            if health_score >= 0.8:
                overall_status = "HEALTHY"
            elif health_score >= 0.6:
                overall_status = "WARNING"
            else:
                overall_status = "CRITICAL"
            
            # Mettre √† jour le statut
            self.system_status.system_health_score = health_score
            self.system_status.overall_status = overall_status
            
            if issues:
                logger.warning(f"‚ö†Ô∏è Probl√®mes de sant√© d√©tect√©s: {', '.join(issues)}")
            else:
                logger.info(f"‚úÖ Syst√®me en bonne sant√© (Score: {health_score:.2f})")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification de la sant√©: {e}")
    
    async def generate_recommendations(self):
        """G√©n√©rer des recommandations de s√©curit√©"""
        try:
            recommendations = []
            
            # Recommandations bas√©es sur les menaces
            if self.system_status.total_threats > 5:
                recommendations.append("Effectuer un scan complet du syst√®me")
                recommendations.append("V√©rifier les processus suspects")
            
            # Recommandations bas√©es sur les moniteurs
            if not PROCESS_MONITOR_AVAILABLE:
                recommendations.append("Installer le moniteur de processus")
            if not FILE_MONITOR_AVAILABLE:
                recommendations.append("Installer le moniteur de fichiers")
            if not REGISTRY_MONITOR_AVAILABLE:
                recommendations.append("Installer le moniteur de registre")
            
            # Recommandations g√©n√©rales
            if self.system_status.system_health_score < 0.8:
                recommendations.append("Mettre √† jour les d√©finitions de menaces")
                recommendations.append("V√©rifier la configuration de s√©curit√©")
            
            # Ajouter des recommandations sp√©cifiques
            recommendations.extend(await self.get_specific_recommendations())
            
            # Mettre √† jour les recommandations
            self.system_status.recommendations = recommendations[:5]  # Limiter √† 5
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration des recommandations: {e}")
    
    async def get_specific_recommendations(self) -> List[str]:
        """Obtenir des recommandations sp√©cifiques selon les moniteurs"""
        recommendations = []
        
        try:
            # Recommandations du moniteur de processus
            if 'process' in self.monitors:
                monitor = self.monitors['process']
                if hasattr(monitor, 'suspicious_processes') and monitor.suspicious_processes:
                    recommendations.append("Terminer les processus suspects d√©tect√©s")
            
            # Recommandations du moniteur de fichiers
            if 'file' in self.monitors:
                monitor = self.monitors['file']
                if hasattr(monitor, 'suspicious_operations') and monitor.suspicious_operations:
                    recommendations.append("Quarantiner les fichiers suspects")
            
            # Recommandations du moniteur de registre
            if 'registry' in self.monitors:
                monitor = self.monitors['registry']
                if hasattr(monitor, 'suspicious_operations') and monitor.suspicious_operations:
                    recommendations.append("Restaurer les cl√©s de registre compromises")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'obtention des recommandations sp√©cifiques: {e}")
        
        return recommendations
    
    def get_system_overview(self) -> Dict[str, Any]:
        """Obtenir une vue d'ensemble du syst√®me"""
        try:
            overview = {
                'system_status': {
                    'overall_status': self.system_status.overall_status,
                    'health_score': self.system_status.system_health_score,
                    'total_threats': self.system_status.total_threats,
                    'active_monitors': self.system_status.active_monitors,
                    'last_scan': self.system_status.last_scan.isoformat()
                },
                'monitors': {},
                'threats_summary': [],
                'recommendations': self.system_status.recommendations
            }
            
            # Informations sur chaque moniteur
            for monitor_name, monitor in self.monitors.items():
                try:
                    monitor_info = {
                        'available': True,
                        'active': getattr(monitor, 'monitoring_active', False),
                        'status': 'active' if getattr(monitor, 'monitoring_active', False) else 'inactive'
                    }
                    
                    # Ajouter des informations sp√©cifiques selon le type de moniteur
                    if monitor_name == 'process' and hasattr(monitor, 'get_processes_summary'):
                        summary = monitor.get_processes_summary()
                        monitor_info['processes_count'] = summary.get('total_processes', 0)
                        monitor_info['suspicious_count'] = summary.get('suspicious_count', 0)
                    
                    elif monitor_name == 'file' and hasattr(monitor, 'get_monitoring_summary'):
                        summary = monitor.get_monitoring_summary()
                        monitor_info['directories_count'] = summary.get('total_monitored_directories', 0)
                        monitor_info['operations_count'] = summary.get('total_file_operations', 0)
                    
                    elif monitor_name == 'registry' and hasattr(monitor, 'get_registry_summary'):
                        summary = monitor.get_registry_summary()
                        monitor_info['keys_count'] = summary.get('total_registry_keys', 0)
                        monitor_info['suspicious_keys'] = summary.get('suspicious_keys', 0)
                    
                    overview['monitors'][monitor_name] = monitor_info
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors de l'obtention des infos de {monitor_name}: {e}")
                    overview['monitors'][monitor_name] = {
                        'available': True,
                        'active': False,
                        'status': 'error',
                        'error': str(e)
                    }
            
            # R√©sum√© des menaces par type
            threat_types = ['process', 'file', 'registry', 'network']
            for threat_type in threat_types:
                if threat_type in self.monitors:
                    monitor = self.monitors[threat_type]
                    threat_count = 0
                    
                    if threat_type == 'process' and hasattr(monitor, 'suspicious_processes'):
                        threat_count = len(monitor.suspicious_processes)
                    elif threat_type == 'file' and hasattr(monitor, 'suspicious_operations'):
                        threat_count = len(monitor.suspicious_operations)
                    elif threat_type == 'registry' and hasattr(monitor, 'suspicious_operations'):
                        threat_count = len(monitor.suspicious_operations)
                    elif threat_type == 'network' and hasattr(monitor, 'suspicious_connections'):
                        threat_count = len(monitor.suspicious_connections)
                    
                    if threat_count > 0:
                        overview['threats_summary'].append({
                            'type': threat_type,
                            'count': threat_count,
                            'severity': 'HIGH' if threat_count > 5 else 'MEDIUM' if threat_count > 2 else 'LOW'
                        })
            
            return overview
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'obtention de la vue d'ensemble: {e}")
            return {
                'error': str(e),
                'system_status': {
                    'overall_status': 'ERROR',
                    'health_score': 0.0,
                    'total_threats': 0,
                    'active_monitors': 0,
                    'last_scan': datetime.now().isoformat()
                }
            }
    
    def add_directory_to_monitor(self, directory_path: str) -> bool:
        """Ajouter un r√©pertoire √† surveiller"""
        if 'file' in self.monitors:
            return self.monitors['file'].add_directory(directory_path)
        return False
    
    def remove_directory_from_monitor(self, directory_path: str) -> bool:
        """Retirer un r√©pertoire de la surveillance"""
        if 'file' in self.monitors:
            return self.monitors['file'].remove_directory(directory_path)
        return False
    
    def get_monitored_directories(self) -> List[str]:
        """Obtenir la liste des r√©pertoires surveill√©s"""
        if 'file' in self.monitors:
            return list(self.monitors['file'].monitored_dirs.keys())
        return []

# Instance globale
unified_monitor = UnifiedSystemMonitor()

async def main():
    """Fonction principale de test"""
    logger.info("üöÄ Test du syst√®me de monitoring unifi√©...")
    
    # D√©marrer la surveillance
    try:
        await unified_monitor.start_all_monitoring()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur...")
    finally:
        await unified_monitor.stop_all_monitoring()
        logger.info("‚úÖ Syst√®me de monitoring arr√™t√©")

if __name__ == "__main__":
    asyncio.run(main())
