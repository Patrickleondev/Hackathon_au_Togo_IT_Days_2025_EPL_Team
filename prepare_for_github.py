"""
Script de pr√©paration pour GitHub
RansomGuard AI - Hackathon Togo IT Days 2025
"""

import os
import shutil
import subprocess
from pathlib import Path

def clean_project():
    """Nettoyer le projet pour GitHub"""
    print("üßπ Nettoyage du projet pour GitHub...")
    
    # Dossiers √† nettoyer
    dirs_to_clean = [
        "backend/models",
        "backend/logs",
        "backend/results",
        "test_suite/results",
        "test_suite/samples",
        "__pycache__",
        "frontend/node_modules",
        "frontend/build",
        "frontend/dist"
    ]
    
    for dir_path in dirs_to_clean:
        if os.path.exists(dir_path):
            print(f"üóëÔ∏è Suppression de {dir_path}")
            shutil.rmtree(dir_path)
    
    # Cr√©er les dossiers n√©cessaires
    os.makedirs("backend/models", exist_ok=True)
    os.makedirs("backend/logs", exist_ok=True)
    os.makedirs("test_suite/results", exist_ok=True)
    
    print("‚úÖ Nettoyage termin√©")

def create_placeholder_files():
    """Cr√©er des fichiers placeholder"""
    print("üìù Cr√©ation des fichiers placeholder...")
    
    # Placeholder pour les mod√®les
    models_placeholder = """# Dossier des Mod√®les IA

Ce dossier contiendra les mod√®les entra√Æn√©s apr√®s ex√©cution de :
```bash
python train_models_for_hackathon.py
```

## Mod√®les G√©n√©r√©s
- frontend_unified_model.pkl
- random_forest_model.pkl
- svm_model.pkl
- neural_network_model.pkl
- distilbert_hackathon/
- roberta_hackathon/
- dialogpt_hackathon/
- codebert_hackathon/
- unified_model_metadata.json

## Instructions
1. Ex√©cuter l'entra√Ænement : `python train_models_for_hackathon.py`
2. Les mod√®les seront automatiquement g√©n√©r√©s ici
3. Le syst√®me utilisera ces mod√®les pour la d√©tection
"""
    
    with open("backend/models/README.md", "w", encoding="utf-8") as f:
        f.write(models_placeholder)
    
    # Placeholder pour les logs
    logs_placeholder = """# Dossier des Logs

Les logs du syst√®me seront g√©n√©r√©s ici lors de l'ex√©cution.
"""
    
    with open("backend/logs/README.md", "w", encoding="utf-8") as f:
        f.write(logs_placeholder)
    
    # Placeholder pour les r√©sultats de tests
    test_results_placeholder = """# Dossier des R√©sultats de Tests

Les r√©sultats des tests seront g√©n√©r√©s ici lors de l'ex√©cution des scripts de test.
"""
    
    with open("test_suite/results/README.md", "w", encoding="utf-8") as f:
        f.write(test_results_placeholder)
    
    print("‚úÖ Fichiers placeholder cr√©√©s")

def update_documentation():
    """Mettre √† jour la documentation"""
    print("üìö Mise √† jour de la documentation...")
    
    # Cr√©er un fichier d'installation rapide
    quick_install = """# üöÄ Installation Rapide

## Pr√©requis
- Python 3.8+
- Node.js 16+
- Git

## Installation
```bash
# 1. Cloner le projet
git clone <repository_url>
cd "Togo IT Days/backend"

# 2. Installer les d√©pendances
pip install -r requirements.txt

# 3. D√©marrer le syst√®me
python start_hackathon.py
```

## Acc√®s
- Frontend: http://localhost:3000
- Backend: http://localhost:8000
- Documentation: http://localhost:8000/docs

## Tests
```bash
python test_suite/test_single_executable.py "fichier.exe"
python test_suite/test_advanced_detection.py
```
"""
    
    with open("INSTALLATION_RAPIDE.md", "w", encoding="utf-8") as f:
        f.write(quick_install)
    
    print("‚úÖ Documentation mise √† jour")

def check_git_status():
    """V√©rifier le statut Git"""
    print("üîç V√©rification du statut Git...")
    
    try:
        # V√©rifier si c'est un repo Git
        result = subprocess.run(['git', 'status'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Repository Git d√©tect√©")
            
            # Afficher les fichiers modifi√©s
            result = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
            if result.stdout.strip():
                print("üìù Fichiers modifi√©s:")
                print(result.stdout)
            else:
                print("‚úÖ Aucun fichier modifi√©")
        else:
            print("‚ö†Ô∏è Pas de repository Git d√©tect√©")
            
    except FileNotFoundError:
        print("‚ö†Ô∏è Git non install√©")

def create_deployment_script():
    """Cr√©er un script de d√©ploiement"""
    print("üöÄ Cr√©ation du script de d√©ploiement...")
    
    deploy_script = """#!/bin/bash
# Script de d√©ploiement pour le hackathon

echo "üöÄ D√©ploiement de RansomGuard AI..."

# V√©rifier les pr√©requis
echo "üîç V√©rification des pr√©requis..."
python --version
node --version
npm --version

# Installer les d√©pendances
echo "üì¶ Installation des d√©pendances..."
pip install -r requirements.txt

# Entra√Æner les mod√®les
echo "üß† Entra√Ænement des mod√®les..."
python train_models_for_hackathon.py

# D√©marrer le syst√®me
echo "üéØ D√©marrage du syst√®me..."
python start_hackathon.py
"""
    
    with open("deploy.sh", "w") as f:
        f.write(deploy_script)
    
    # Rendre le script ex√©cutable (Linux/Mac)
    try:
        os.chmod("deploy.sh", 0o755)
    except:
        pass
    
    print("‚úÖ Script de d√©ploiement cr√©√©")

def main():
    """Fonction principale"""
    print("üéØ Pr√©paration du projet pour GitHub")
    print("="*50)
    
    # 1. Nettoyer le projet
    clean_project()
    
    # 2. Cr√©er les fichiers placeholder
    create_placeholder_files()
    
    # 3. Mettre √† jour la documentation
    update_documentation()
    
    # 4. Cr√©er le script de d√©ploiement
    create_deployment_script()
    
    # 5. V√©rifier le statut Git
    check_git_status()
    
    print("\n" + "="*50)
    print("‚úÖ Projet pr√™t pour GitHub!")
    print("\nüìã Prochaines √©tapes:")
    print("1. git add .")
    print("2. git commit -m 'Initial commit - RansomGuard AI Hackathon'")
    print("3. git push origin main")
    print("\nüéØ Pour l'√©quipe:")
    print("1. git clone <repository_url>")
    print("2. cd 'Togo IT Days/backend'")
    print("3. python start_hackathon.py")
    print("="*50)

if __name__ == "__main__":
    main() 